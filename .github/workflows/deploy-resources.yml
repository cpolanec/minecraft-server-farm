#
# apply changes to Minecraft server farm resources
# (e.g. new installations, resource upgrades, and testing feature branches)
#
name: deploy
on:
  push:
    branches: ["**"]
    tags-ignore: ["v*"]
    paths-ignore: ["**.md", "docs/**", "LICENSE"]

# environment variables that are independent of current branch
env:
  AWS_REGION: us-east-1
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  DEPLOY_ROLE_ARN: ${{ secrets.DEPLOY_ROLE_ARN }}
  PUBLISH_ROLE_ARN: ${{ secrets.PUBLISH_ROLE_ARN }}
  CLOUDFORMATION_ROLE_ARN: ${{ secrets.CLOUDFORMATION_ROLE_ARN }}
  LAMBDA_ROLE_ARN: ${{ secrets.LAMBDA_ROLE_ARN }}
  EC2_ROLE_ARN: ${{ secrets.EC2_ROLE_ARN }}
  SSH_KEY_NAME: ${{ secrets.SSH_KEY_NAME }}

jobs:
  init:
    #
    # establish environment variables based on the current branch
    # (see project README for further explanation of the environment variables)
    #
    name: init env variables
    runs-on: ubuntu-latest

    outputs:
      environment: ${{ steps.setenv.outputs.environment }}
      server_def_source: ${{ steps.setenv.outputs.server_def_source }}

    steps:
      - name: Set environment variables based on git branch
        id: setenv
        run: |
          if [[ "${{github.ref}}" == "refs/heads/main" ]]; then
            echo "::set-output name=environment::main"
            echo "::set-output name=server_def_source::file://./servers/main"
          else
            echo "::set-output name=environment::test"
            echo "::set-output name=server_def_source::file://./servers/test"
          fi

  deploy:
    #
    # deploy all changes
    # (if testing: cleanup resources created from feature branch)
    #
    name: deploy aws changes
    runs-on: ubuntu-latest
    needs: init

    env:
      ENVIRONMENT: ${{ needs.init.outputs.environment }}
      SERVER_DEFINITION_SOURCE: ${{ needs.init.outputs.server_def_source }}

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Node.js runtime
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Cache Node.js dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install project dependencies
        run: npm ci
      
      - name: Validate project changes
        run: |
          npm run build
          npm run lint
          npm run test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          flags: unittest
      
      - name: Deploy CDK application stacks
        run: npm run deploy

      - name: Cleanup resources used in testing
        if: ${{ github.ref != 'refs/heads/main' }}
        run: npx cdk destroy --force mcservers-test-hosts
